{
  "policy": {
    "name": " Apache (RPM-based Linux) v4 (Siam)", 
    "url": "https://api.cloudpassage.com/v1/policies/0e521d40a5b9013267373c764e10c220", 
    "used_by": [], 
    "platform": "linux", 
    "rules": [
      {
        "comment": "Check the string in a file.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "KeepAlive On", 
            "suggestion": "Check the string in a file.", 
            "active": true, 
            "present": true
          }
        ], 
        "name": "File String Presence"
      }, 
      {
        "comment": "The PID file should have file security settings of owner \"root\" and group ownership \"root\". If default path is \"/var/run/httpd.pid\",  Then you must specify the location of your ServerRoot in the two checks below.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "files": "/var/run/httpd.pid", 
            "exportable": true, 
            "object_type": "file_user_ownership", 
            "suggestion": "Change the PID file to user owner \"root\".", 
            "active": true, 
            "owned_by": "root"
          }, 
          {
            "files": "/var/run/httpd.pid", 
            "exportable": true, 
            "object_type": "file_group_ownership", 
            "suggestion": "Change the PID file to group ownership \"root\".", 
            "active": true, 
            "owned_by": "root"
          }
        ], 
        "name": "PID file security"
      }, 
      {
        "comment": "This rule is designed to verify that the Apache Web Server has been configured to use the Secure Sockets Layer engine.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "#", 
            "exportable": true, 
            "config_item": "SSLEngine", 
            "desired_value": "NOT:off", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Set SSLEngine to \"On\" in the Apache ssl.conf configuration file.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf.d/ssl.conf"
          }
        ], 
        "name": "Require that Apache web server have encryption enabled"
      }, 
      {
        "comment": "Web server methods are defined in section 9 of RFC 2616 (http://www.ietf.org/rfc/rfc2616.txt). If a web\r\nserver does not require the implementation of all available methods, they should be disabled.\r\n\r\nNote: GET and POST are the most common methods. A majority of the others are limited to the WebDAV protocol and expose servers to potential abuse and attack.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "comment_character": "#", 
            "exportable": true, 
            "config_item": "<LimitExcept GET", 
            "desired_value": "POST>", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "Using the LimitExcept directive for the primary web server and virtual web servers will let us prevent the use of HTTP methods besides GET and POST by adding the line:\r\n\r\n<LimitExcept GET POST>\r\n\r\nLimiting the number of HTTP methods Apache will allow will limit your exposure.\r\n\r\nThe following block added inside a <Directory...> </Directory> block will limit the available methods:\r\n    <LimitExcept GET POST>\r\n        Order deny,allow\r\n        Deny from all\r\n    </LimitExcept>\r\nRemember to restart the server if running:\r\nsudo service httpd condrestart\r\n", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }, 
          {
            "comment_character": "#", 
            "exportable": true, 
            "config_item": "TraceEnable", 
            "desired_value": "off", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "The HTTP method TRACE should be turned off since it is often used in cross-site scripting and other attacks.  The fewer HTTP methods you allow - the smaller attack surface you provide.\r\n\r\nYou can add the following line to the configuration file:\r\nTraceEnable off\r\n\r\nAlternatively you can create a shell script with the following commands to make these changes:\r\nsudo sed -i -e 's/#*TraceEnable .*\\)/#\\1/i' /etc/httpd/conf/httpd.conf\r\n#Append a new line at the end with our preferred key and value\r\necho 'TraceEnable off' | sudo tee -a /etc/httpd/conf/httpd.conf\r\n#Restart the service if it was already running, leave stopped if not.\r\nsudo service httpd condrestart", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Limit available HTTP methods"
      }, 
      {
        "comment": "Unauthorized modification to the Apache log files can enable a malicious user or automation to obfuscate its activities. This is an extremely common persistent-threat tactic if a web server has been compromised. The Apache log directories and files should be closely protected.\r\n\r\nThe checks below assume the default location for Apache 2 files on a RHEL/CentOS/Fedora distribution (/var/log/httpd). The checks should be adjusted if your servers do not use these defaults. If you utilize Apache virtual hosts that use separate logging locations, additional directory and file checks should be added to ensure their protection.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": true, 
        "active": true, 
        "checks": [
          {
            "folders": "/var/log/httpd/*, /var/log/httpd", 
            "exportable": true, 
            "object_type": "directory_user_ownership", 
            "suggestion": "This folder commonly contains log files for the Apache http server. If permissions on this directory are excessively permissive, a malicious user or automation could mask their activities by tampering with the logs. In addition, the ability to view Apache logs can leak information to attackers that can accelerate and/or amplify other exposures. The ability to view web log files can be used to gather intelligence on the effectiveness of attacks vectored to Apache.\r\n\r\nThe configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 640 is recommended. Because the Apache startup process typically runs with root privileges and is able to initially open and establish a handle to the root-owned files.\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chown -R root /var/log/httpd\r\n", 
            "active": false, 
            "owned_by": "root"
          }, 
          {
            "files": "/var/log/httpd/*, /var/log/httpd", 
            "exportable": true, 
            "object_type": "directory_group_ownership", 
            "suggestion": "This folder commonly contains log files for the Apache http server. If permissions on this directory are excessively permissive, a malicious user or automation could mask their activities by tampering with the logs. In addition, the ability to view Apache logs can leak information to attackers that can accelerate and/or amplify other exposures. The ability to view web log files can be used to gather intelligence on the effectiveness of attacks vectored to Apache.\r\n\r\nThe configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 640 is recommended. Because the Apache startup process typically runs with root privileges and is able to initially open and establish a handle to the root-owned files.\r\n\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chgrp -R root /var/log/httpd\r\n", 
            "active": false, 
            "owned_by": "root"
          }, 
          {
            "files": "/var/log/httpd/*, /var/log/httpd", 
            "exportable": true, 
            "object_type": "directory_acl", 
            "acls": "NOT: *2*,*3*,*6*,*7*,**1,**2,**3,**4,**5,**6,**7", 
            "suggestion": "This folder commonly contains log files for the Apache http server. If permissions on this directory are excessively permissive, a malicious user or automation could mask their activities by tampering with the logs. In addition, the ability to view Apache logs can leak information to attackers that can accelerate and/or amplify other exposures. The ability to view web log files can be used to gather intelligence on the effectiveness of attacks vectored to Apache.\r\n\r\nThe configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 750 is recommended. Because the Apache startup process typically runs with root privileges and is able to initially open and establish a handle to the root-owned files.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 750 is recommended. Because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\nExample command to change mode to 750 (may vary depending on system configuration):\r\nsudo chmod 750 /var/log/httpd\r\n", 
            "active": false
          }, 
          {
            "files": "/var/log/httpd/*", 
            "exportable": true, 
            "object_type": "file_user_ownership", 
            "suggestion": "This folder commonly contains log files for the Apache http server. If permissions on this directory are excessively permissive, a malicious user or automation could mask their activities by tampering with the logs. In addition, the ability to view Apache logs can leak information to attackers that can accelerate and/or amplify other exposures. The ability to view web log files can be used to gather intelligence on the effectiveness of attacks vectored to Apache.\r\n\r\nThe configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 700 is recommended. Because the Apache startup process typically runs with root privileges and is able to initially open and establish a handle to the root-owned files.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\nIf this Apache configuration file has excessively permissive access rights, they should be restricted.\r\nRoot user and group ownership with an ACL of 700 is recommended. Because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chown -R root /var/log/httpd/*\r\n", 
            "active": false, 
            "owned_by": "root"
          }, 
          {
            "files": "/var/log/httpd/*", 
            "exportable": true, 
            "object_type": "file_group_ownership", 
            "suggestion": "This folder commonly contains log files for the Apache http server. If permissions on this directory are excessively permissive, a malicious user or automation could mask their activities by tampering with the logs. In addition, the ability to view Apache logs can leak information to attackers that can accelerate and/or amplify other exposures. The ability to view web log files can be used to gather intelligence on the effectiveness of attacks vectored to Apache.\r\n\r\nThe configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 640 is recommended. Because the Apache startup process typically runs with root privileges and is able to initially open and establish a handle to the root-owned files.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\nIf this Apache configuration file has excessively permissive access rights, they should be restricted.\r\nRoot user and group ownership with an ACL of 700 is recommended. Because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chgrp -R root /var/log/httpd/*\r\n", 
            "active": false, 
            "owned_by": "root"
          }, 
          {
            "files": "/var/log/httpd/*", 
            "exportable": true, 
            "object_type": "file_acl", 
            "acls": "NOT: *1*,*2*,*3*,*5*,*6*,*7*,**1,**2,**3,**4,**5,**6,**7", 
            "suggestion": "This folder commonly contains log files for the Apache http server. If permissions on this directory are excessively permissive, a malicious user or automation could mask their activities by tampering with the logs. In addition, the ability to view Apache logs can leak information to attackers that can accelerate and/or amplify other exposures. The ability to view web log files can be used to gather intelligence on the effectiveness of attacks vectored to Apache.\r\n\r\nThe configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 640 is recommended. Because the Apache startup process typically runs with root privileges and is able to initially open and establish a handle to the root-owned files.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\nIf this Apache configuration file has excessively permissive access rights, they should be restricted.\r\nRoot user and group ownership with an ACL of 640 is recommended. Because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\nExample command to change mode to 640 (may vary depending on system configuration):\r\nsudo chmod 640 /var/log/httpd/*\r\n", 
            "active": false
          }
        ], 
        "name": "Protect access to Apache logs"
      }, 
      {
        "comment": "The UserDir directive provides user-specific directory translation, allowing content to be served directly from all users' home directories. This creates a highly controlled content-serving environment (especially if directory options are allowed within user .htaccess files). Even if users are not serving content from their home directories, this option allows an attacker to enumerate usernames on the system which greatly improves targeting of brute-force access attempts. Disabling user home directory content serving is strongly recommended.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": true, 
        "active": true, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LoadModule userdir_module", 
            "desired_value": "NOT: modules/mod_userdir.so", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "Enabling the mod_userdir functionality exposes the web server to a highly uncontrolled content environment and enumeration of system user accounts.\r\n\r\nDisable the userdir_module by commenting out its LoadModule directive in the Apache configuration file.\r\n\r\nHere are example commands that you may need to customize for your environment.  Either add #:\r\nTo the beginning of LoadModule userdir_module modules/mod_userdir.so in /etc/httpd/conf/httpd.conf by hand, or copy and paste these commands:\r\nsudo sed -i 's|LoadModule userdir_module modules/mod_userdir.so|#LoadModule userdir_module modules/mod_userdir.so|' /etc/httpd/conf/httpd.conf\r\nsudo service httpd condrestart\r\n\r\nTo verify that the module isn't loaded anymore, use the command: httpd -M.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Disable serving content from user home directories"
      }, 
      {
        "comment": "Web server processes are frequently hijacked and exploited to gain access to underlying server environments. If web server processes are running with high privileges, these exploits can be devastating. The Apache web server process should be owned by a user and group with tightly controlled access.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": true, 
        "active": true, 
        "checks": [
          {
            "comment_character": "#", 
            "exportable": true, 
            "config_item": "User", 
            "desired_value": "NOT: root", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "In order to ensure that the child processes Apache launches are owned by a user other than root, we check the User directive for the default Apache user.\r\nTo return to the default user, edit the \"User\" line in /etc/httpd/conf/httpd.conf to read:\r\nUser apache", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }, 
          {
            "comment_character": "#", 
            "exportable": true, 
            "config_item": "Group", 
            "desired_value": "NOT: root", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "In order to ensure that the child processes Apache launches are owned by a group other than root (or wheel), we check the Group directive for the default Apache group.\r\nTo return to the default group, edit the \"Group\" line in /etc/httpd/conf/httpd.conf to read:\r\nGroup apache", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Apache process owner/group should be restricted"
      }, 
      {
        "comment": "The ServerTokens and ServerSignature directives determine how much information the web server discloses\r\nabout the configuration of the system. ServerTokens Prod restricts information in page headers, returning only\r\nthe word Apache. ServerSignature Off keeps Apache from displaying the server version on error pages. It is a good security practice to limit the information provided to clients.\r\n\r\nNOTE: After version 2.0.44, the details of the Apache server version number presented are controlled by the ServerTokens directive. Prior to this version, the ServerSignature directive is used to control information presented in the server signature.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": true, 
        "active": true, 
        "checks": [
          {
            "comment_character": "#", 
            "exportable": true, 
            "config_item": "ServerTokens", 
            "desired_value": "Prod", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "The ServerTokens directive is often configured to be excessive in sharing information about the Apache web server with the outside world. This is one of the most common vectors for probing web services and underlying servers for information that can be used to launch an attack.\r\n\r\nThe ServerTokens directive should almost always be set to the \"Prod\" setting to absolutely minimize the information accessible to potential attackers.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }, 
          {
            "comment_character": "#", 
            "exportable": true, 
            "config_item": "ServerSignature", 
            "desired_value": "Off", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "The ServerSignature directive is often configured to be excessive in sharing information about the Apache web server with the outside world. This is one of the most common vectors for probing web services and underlying servers for information that can be used to launch an attack.\r\n\r\nIn production environments, the ServerSignature directive should almost always be set to the \"Off\" setting to absolutely minimize the information accessible to potential attackers.\r\n\r\nNOTE: After version 2.0.44, the details of the Apache server version number presented are controlled by the ServerTokens directive. Prior to this version, the ServerSignature directive is used to control information presented in the server signature.", 
            "active": false, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Prevent ServerTokens and ServerSignature information leakage"
      }, 
      {
        "comment": "This module provides a second layer of MIME support that in most configurations is likely extraneous. As a general rule of thumb, explicit MIME handling should be used.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LoadModule mime_magic_module", 
            "desired_value": "NOT: modules/mod_mime_magic.so", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "Unless the MIME magic module is explicitly required, it should be disabled.\r\n\r\nHere are example commands that you may need to customize for your environment.  Either:\r\n\r\nAdd # to the beginning of LoadModule mime_magic_module modules/mod_mime_magic.so in /etc/httpd/conf/httpd.conf by hand, or \r\n\r\nCopy and paste these commands:\r\n\r\nsudo sed -i 's|LoadModule mime_magic_module modules/mod_mime_magic.so|#LoadModule mime_magic_module modules/mod_mime_magic.so|' /etc/httpd/conf/httpd.conf\r\nsudo service httpd condrestart\r\n\r\nTo verify that the module isn't loaded anymore, use the command: httpd -M\r\n", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Disable MIME Magic"
      }, 
      {
        "comment": "WebDAV is an extension of the HTTP protocol that provides distributed and collaborative access to web content. This protocol is easily misconfigured and can be abused to corrupt content or expose sensitive information to unauthorized users. Due to a number of security concerns with WebDAV, its use is not recommended.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LoadModule dav_module", 
            "desired_value": "NOT: modules/mod_dav.so", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "If WebDAV is not explicitly required, the WebDAV module should be disabled by commenting out its LoadModule directive. \r\nIf this functionality is required and no other alternative is available, its configuration should be closely scrutinized and user access control should be closely managed. The use of the WebDAV protocol to manage sensitive information is strongly discouraged. Other approaches are likely available that provide much more robust security.\r\n\r\nHere are example commands that you may need to customize for your environment.  Either:\r\nAdd # to the beginning of LoadModule dav_module modules/mod_dav.so in /etc/httpd/conf/httpd.conf by hand, or \r\nCopy and paste these commands:\r\nsudo sed -i 's|LoadModule dav_module modules/mod_dav.so|#LoadModule dav_module modules/mod_dav.so|' /etc/httpd/conf/httpd.conf\r\nsudo service httpd condrestart\r\n\r\nTo verify that the module isn't loaded anymore, use the command: httpd -M.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }, 
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LoadModule dav_fs_module", 
            "desired_value": "NOT: modules/mod_dav_fs.so", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "If WebDAV is not explicitly required, the WebDAV module should be disabled by commenting out its LoadModule directive. \r\nIf this functionality is required and no other alternative is available, its configuration should be closely scrutinized and user access control should be closely managed. The use of the WebDAV protocol to manage sensitive information is strongly discouraged. Other approaches are likely available that provide much more robust security.\r\n\r\nHere are example commands that you may need to customize for your environment.  Either:\r\nAdd # to the beginning of LoadModule dav_fs_module modules/mod_dav_fs.so in /etc/httpd/conf/httpd.conf by hand, or \r\nCopy and paste these commands:\r\nsudo sed -i 's|LoadModule dav_fs_module modules/mod_dav_fs.so|#LoadModule dav_fs_module modules/mod_dav_fs.so|' /etc/httpd/conf/httpd.conf\r\nsudo service httpd condrestart\r\n\r\nTo verify that the module isn't loaded anymore, use the command: httpd -M.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Disable WebDAV"
      }, 
      {
        "comment": "This module provides real-time access to statistics on the internal operation of the web server. This is an unnecessary information leak and should be disabled.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LoadModule status_module", 
            "desired_value": "NOT: modules/mod_status.so", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "If the mod_status module is enabled, it should be disabled unless explicitly needed. If it is required, the mod_status module output should be restricted to authorized IP addresses. The information provided by the mod_status module is easily leveraged by an attacker to assess the impact of various attack attempts, especially denial-of-service and buffer overflow attacks.\r\n\r\nHere are example commands that you may need to customize for your environment.  Either add #:\r\nTo the beginning of LoadModule status_module modules/mod_status.so in /etc/httpd/conf/httpd.conf by hand, or copy and paste these commands:\r\nsudo sed -i 's|LoadModule status_module modules/mod_status.so|#LoadModule status_module modules/mod_status.so|' /etc/httpd/conf/httpd.conf\r\nsudo service httpd condrestart\r\n\r\nTo verify that the module isn't loaded anymore, use the command: httpd -M.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Disable server activity status"
      }, 
      {
        "comment": "This module creates a web page illustrating the configuration of the web server. This is an unnecessary information leak and should be disabled.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LoadModule info_module", 
            "desired_value": "NOT: modules/mod_info.so", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "The mod_info module can provide easy access to information that an attacker can use to learn about the server configuration. It should be disabled if not required. If there is a critical need for this module, use the Location directive to provide an access control list to restrict access to the information.\r\n\r\nHere are example commands that you may need to customize for your environment.  Either add #:\r\nTo the beginning of LoadModule info_module modules/mod_info.so in /etc/httpd/conf/httpd.conf by hand, or copy and paste these commands:\r\nsudo sed -i 's|LoadModule info_module modules/mod_info.so|#LoadModule info_module modules/mod_info.so|' /etc/httpd/conf/httpd.conf\r\nsudo service httpd condrestart\r\n\r\nTo verify that the module isn't loaded anymore, use the command: httpd -M.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Disable web server configuration display"
      }, 
      {
        "comment": "Unauthorized modification to the Apache configuration files can result in a gross server compromise. These directories and files should be closely protected. It should be noted that in most cases Apache starts as the root user, switching process user and group ownership to the Apache-configured parameters when the server is completely started up and ready to process requests.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": true, 
        "active": true, 
        "checks": [
          {
            "folders": "/etc/httpd/conf, /etc/httpd/conf/*", 
            "exportable": true, 
            "object_type": "directory_user_ownership", 
            "suggestion": "This folder commonly contains configuration files for the Apache http server. If permissions on this directory are excessively permissive, a malicious local user (or a malicious remote attacker) could modify the Apache httpd server configuration. Such modifications could be disastrous to the security of not just the Apache service itself, but to the entire server.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 640 is recommended. Because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chown -R root /etc/httpd/conf\r\n", 
            "active": false, 
            "owned_by": "root"
          }, 
          {
            "files": "/etc/httpd/conf, /etc/httpd/conf/*", 
            "exportable": true, 
            "object_type": "directory_group_ownership", 
            "suggestion": "This folder commonly contains configuration files for the Apache http server. If permissions on this directory are excessively permissive, a malicious local user (or a malicious remote attacker) could modify the Apache httpd server configuration. Such modifications could be disastrous to the security of not just the Apache service itself, but to the entire server.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 640 is recommended. Because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chgrp -R root /etc/httpd/conf\r\n", 
            "active": false, 
            "owned_by": "root"
          }, 
          {
            "files": "/etc/httpd/conf, /etc/httpd/conf/*", 
            "exportable": true, 
            "object_type": "directory_acl", 
            "acls": "NOT: *2*,*3*,*6*,*7*,**1,**2,**3,**4,**5,**6,**7", 
            "suggestion": "This folder commonly contains configuration files for the Apache http server. If permissions on this directory are excessively permissive, a malicious local user (or a malicious remote attacker) could modify the Apache httpd server configuration. Such modifications could be disastrous to the security of not just the Apache service itself, but to the entire server.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\n\r\nIf the Apache configuration directory has excessively permissive access rights, they should be restricted.\r\n\r\nRoot user and group ownership with an ACL of 750 is recommended because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\n\r\nExample command to change mode to 750 (may vary depending on system configuration):\r\nsudo chmod 750 /etc/httpd/conf/\r\n", 
            "active": false
          }, 
          {
            "files": "/etc/httpd/conf/*/*, /etc/httpd/conf/*", 
            "exportable": true, 
            "object_type": "file_user_ownership", 
            "suggestion": "Because this file is in a Apache configuration directory structure it is believed to be an Apache configuration file. If permissions on this file are excessively permissive, a malicious local user (or a malicious remote attacker) could modify the Apache httpd server configuration. Such modifications could be disastrous to the security of not just the Apache service itself, but to the entire server.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\nIf this Apache configuration file has excessively permissive access rights, they should be restricted.\r\nRoot user and group ownership with an ACL of 700 is recommended. Because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chown -R root /etc/httpd/conf/*\r\n", 
            "active": false, 
            "owned_by": "root"
          }, 
          {
            "files": "/etc/httpd/conf/*/*, /etc/httpd/conf/*", 
            "exportable": true, 
            "object_type": "file_group_ownership", 
            "suggestion": "Because this file is in a Apache configuration directory structure it is believed to be an Apache configuration file. If permissions on this file are excessively permissive, a malicious local user (or a malicious remote attacker) could modify the Apache httpd server configuration. Such modifications could be disastrous to the security of not just the Apache service itself, but to the entire server.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\nIf this Apache configuration file has excessively permissive access rights, they should be restricted.\r\nRoot user and group ownership with an ACL of 660 is recommended. Because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chgrp -R root /etc/httpd/conf/*\r\n", 
            "active": false, 
            "owned_by": "root"
          }, 
          {
            "files": "/etc/httpd/conf/*/*, /etc/httpd/conf/*", 
            "exportable": true, 
            "object_type": "file_acl", 
            "acls": "NOT: *1*,*2*,*3*,*5*,*6*,*7*,**1,**2,**3,**4,**5,**6,**7", 
            "suggestion": "Because this file is in a Apache configuration directory structure it is believed to be an Apache configuration file. If permissions on this file are excessively permissive, a malicious local user (or a malicious remote attacker) could modify the Apache httpd server configuration. Such modifications could be disastrous to the security of not just the Apache service itself, but to the entire server.\r\nIn addition, the ability to view the configuration of the Apache web server environment can leak information to attackers that can accelerate and/or amplify other exposures. The configuration directory of the Apache http server should not be world-readable and should generally only be writable by the root or administrative user.\r\nIf this Apache configuration file has excessively permissive access rights, they should be restricted.\r\nRoot user and group ownership with an ACL of 640 is recommended. Because the Apache startup process typically runs with root privileges and is able to read configuration files as the root user.\r\n\r\n\r\nExample command to change mode to 640 (may vary depending on system configuration):\r\nsudo chmod 640 /etc/httpd/conf/*\r\n", 
            "active": false
          }
        ], 
        "name": "Protect access to Apache configuration"
      }, 
      {
        "comment": "Corruption of the Apache httpd binary by a malicious user or persistent threat automation would comprise a gross compromise of the entire server. The Apache server startup process typically runs as the root user, meaning that any malware function injected into the startup process would also run with root privileges. All copies of the Apache daemon binary should be protected closely. The checks below are configured for the default Apache 2 daemon binary location on a RHEL/CentOS/Fedora Apache distribution. Other copies of the binary should be located using the \"which\" or \"find\" commands and should be protected as well. \r\n\r\nTip: Ensuring that the correct binary is used at startup can be achieved by explicit specification of the full path to the Apache httpd binary in the httpd init script (typically located at or linked to /etc/init.d/httpd).", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": true, 
        "active": true, 
        "checks": [
          {
            "files": "/usr/sbin/httpd", 
            "exportable": true, 
            "object_type": "file_user_ownership", 
            "suggestion": "The Apache httpd daemon binary is started up as root before privileges are reduced to the configured user/group specified in the Apache configuration file. Compromise of this binary by a malicious user or persistent threat automation would comprise a gross compromise of the entire server.\r\n\r\nThe httpd daemon should be configured for root user and group ownership with an ACL of 755.\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chown root /usr/sbin/httpd\r\n", 
            "active": true, 
            "owned_by": "root"
          }, 
          {
            "files": "/usr/sbin/httpd", 
            "exportable": true, 
            "object_type": "file_group_ownership", 
            "suggestion": "The Apache httpd daemon binary is started up as root before privileges are reduced to the configured user/group specified in the Apache configuration file. Compromise of this binary by a malicious user or persistent threat automation would comprise a gross compromise of the entire server.\r\n\r\nThe httpd daemon should be configured for root user and group ownership with an ACL of 755.\r\n\r\nExample command to change ownership to root (may vary depending on system configuration):\r\nsudo chgrp root /usr/sbin/httpd\r\n", 
            "active": true, 
            "owned_by": "root"
          }, 
          {
            "files": "/usr/sbin/httpd", 
            "exportable": true, 
            "object_type": "file_acl", 
            "acls": "NOT: *2*,*3*,*6*,*7*,**2,**3,**6,**7", 
            "suggestion": "The Apache httpd daemon binary is started up as root before privileges are reduced to the configured user/group specified in the Apache configuration file. Compromise of this binary by a malicious user or persistent threat automation would comprise a gross compromise of the entire server.\r\n\r\nThe httpd daemon should be configured for root user and group ownership with an ACL of 755.\r\n\r\nExample command to change mode to 755 (may vary depending on system configuration):\r\nsudo chmod 755 /usr/sbin/httpd\r\n", 
            "active": true
          }
        ], 
        "name": "Protect access to Apache daemon binary"
      }, 
      {
        "comment": "The cache_module allows Apache to cache data, optimizing access to frequently accessed content. However, not only\r\nis it an experimental module, but it also introduces potential security flaws into the web server such as the possibility of circumventing Allow and Deny directives. If not explicitly required, the cache_module on the server should be disabled.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "comment_character": "#", 
            "exportable": true, 
            "config_item": "LoadModule cache_module", 
            "desired_value": "NOT: modules/mod_cache.so", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "If sensitive content is being served by the web server and is protected by HTTP Allow and Deny directives, HTTP caching on the server should be disabled. This module is also experimental as of this writing. Use of experimental modules introduces many unknowns that could be detrimental.\r\n\r\nHere are example commands that you may need to customize for your environment.  Either:\r\nAdd # to the beginning of LoadModule cache_module modules/mod_cache.so in /etc/httpd/conf/httpd.conf by hand, or \r\nCopy and paste these commands:\r\nsudo sed -i 's|LoadModule cache_module modules/mod_cache.so|#LoadModule cache_module modules/mod_cache.so|' /etc/httpd/conf/httpd.conf\r\nsudo service httpd condrestart\r\n\r\nTo verify that the module isn't loaded anymore, use the command: httpd -M\r\n\r\n\r\n\r\n\r\nYou can deactivate this feature by commenting out the following line in the /etc/httpd/conf/httpd.conf file:\r\n\r\nLoadModule cache_module modules/mod_cache.so\r\n\r\nYou can comment out the line by inserting an '#' at the beginning of the line so that it looks like:\r\n\r\n#LoadModule cache_module modules/mod_cache.so\r\n\r\nAfter modifying the file and saving it you should restart the Apache server in order for the changes to take effect.\r\n\r\nAlternatively you can create a shell script with the following commands to make these changes:\r\nsudo sed -i -e 's/#*.LoadModule cache_module.*\\)/#\\1/i' /etc/httpd/conf/httpd.conf\r\n#Append a new line at the end with our preferred key and value\r\necho '#LoadModule cache_module modules/mod_cache.so' | sudo tee -a /etc/httpd/conf/httpd.conf\r\n#Restart the service if it was already running, leave stopped if not.\r\nsudo service httpd condrestart", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Disable Apache caching support"
      }, 
      {
        "comment": "Server Side Includes provide a method of dynamically generating web pages through the insertion of server-side\r\ncode. However, the technology is deprecated and introduces significant security exposures.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": true, 
        "active": true, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LoadModule include_module", 
            "desired_value": "NOT: modules/mod_include.so", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "The server side include module (mod_include) should be disabled unless explicitly needed by commenting out its LoadModule directive.\r\nIf SSI is actually required for an application, alternate methods of delivering the same functionality should be considered. If SSI is absolutely required with no alternative, the security of the SSI code itself and the rights of the web server processes (which should be minimal) need extremely close scrutiny.\r\n\r\nHere are example commands that you may need to customize for your environment.  Either:\r\nAdd # to the beginning of LoadModule include_module modules/mod_include.so in /etc/httpd/conf/httpd.conf by hand, or \r\nCopy and paste these commands:\r\nsudo sed -i 's|LoadModule include_module modules/mod_include.so|#LoadModule include_module modules/mod_include.so|' /etc/httpd/conf/httpd.conf\r\nsudo service httpd condrestart\r\n\r\nTo verify that the module isn't loaded anymore, use the command: httpd -M.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Disable Server Side Includes"
      }, 
      {
        "comment": "Core Dump directory should have the proper security settings and should reside somewhere besides the web document Apache root. The Core Dump directory should be owned by root with group membership equal to apache.\r\nThis check is *not* active by default and to activate you must specify the location of the CoreDumpDirectory.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "files": "/CoreDumpDirectory", 
            "exportable": true, 
            "object_type": "file_presence", 
            "suggestion": "The CoreDump Directory must be in the location specified.", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/CoreDumpDirectory", 
            "exportable": true, 
            "object_type": "file_user_ownership", 
            "suggestion": "The CoreDump Directory must be owned by root.", 
            "active": true, 
            "owned_by": "root"
          }, 
          {
            "files": "/CoreDumpDirectory", 
            "exportable": true, 
            "object_type": "file_group_ownership", 
            "suggestion": "The CoreDump Directory must have a group ownership apache.", 
            "active": true, 
            "owned_by": "apache"
          }
        ], 
        "name": "Core Dump directory security"
      }, 
      {
        "comment": "Iframes and regular web frames can be used to perform XSS attacks. Denying these frames from being loaded from any origin will help mitigate these types of attacks.\r\n\r\nThis check is *not* active by default.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "Header always append X\\-Frame\\-Options SAMEORIGIN", 
            "suggestion": "Make sure that the Apache configuration files contains both \"Header always append X-Frame-Options SAMEORIGIN\" and \"Header always append X-Frame-Options DENY\"", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "Header always append X\\-Frame\\-Options DENY", 
            "suggestion": "Make sure that the Apache configuration files contains both \"Header always append X-Frame-Options SAMEORIGIN\" and \"Header always append X-Frame-Options DENY\"", 
            "active": true, 
            "present": true
          }
        ], 
        "name": "Restrict Browser Frame Options"
      }, 
      {
        "comment": "Set the KeepAliveTimeout to 15 or less", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "KeepAliveTimeout", 
            "desired_value": "15", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Set KeepAliveTimeout less than 15 in the Apache configuration file. Because this check is looking for the specific value of \"15\" it may fail when the KeepAliveTimeout is set to something lower than \"15\". If this is the case change the \"Desired Value in the check to actual value set in httpd.conf.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Set the KeepAliveTimeout to 15 or less"
      }, 
      {
        "comment": "LimitRequestLine sets the maximum number of bytes that Apache will read from an HTTP request. Recommendation is to set LimitRequestLine  to 512 or less.\r\nThis check is *not* active by default.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LimitRequestLine", 
            "desired_value": "512", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Set LimitRequestLine to 512 or less in the Apache configuration file. Because this check is looking for the specific value of \"512\" it may fail when the LimitRequestLine is set to something lower than \"512\". If this is the case change the \"Desired Value in the check to actual value set in httpd.conf.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Set the LimitRequestLine directive to 512 or less"
      }, 
      {
        "comment": "---- Note: Because of the complexity of managing a chroot environment, this is an optional rule.  If you choose to use Apache's mod_security and its SecChrootDirective, check \"Active\" for this rule. ----\r\n\r\nSome services are capable of running in a chroot \"jail\" which means the root filesystem directory of the process is isolated. This helps segregate processes that are more exposed to compromise from the rest of the operating system. You can learn more about chroot jails at: \r\nhttp://en.wikipedia.org/wiki/Chroot_jail\r\n\r\nPutting Apache in a chroot jail isolates an intruder's scope of access in the event that the Apache web server is compromised. Depending on the configuration of the SecChrootDir option, the web server's scope of filesystem access can be tightly restricted to a small section of the filesystem.\r\n\r\nThe checks below are configured for Apache 2.0, but even within the 2.x releases the chroot jail directives and usage can vary. Refer to the Apache docs for usage specific to your environment and adjust the checks below accordingly:\r\nhttp://httpd.apache.org/docs", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "#", 
            "exportable": true, 
            "config_item": "SecChrootDir", 
            "desired_value": "/chroot/apache", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "In order to configure Apache to run from a chroot directory, you will need to install the mod_security Apache module.  If you're using your vendor's precompiled Apache, this may be as easy as \r\napt-get install mod_security\r\nor\r\nyum install mod_security\r\n\r\nNext, edit the Apache configuration file, /etc/httpd/conf/httpd.conf, and add the directive:\r\n\r\nSecChrootDir /chroot/apache\r\n\r\nAlternatively you can create a shell script with the following commands to make these changes:\r\nsudo sed -i -e 's/#*\\(SecChrootDir .*\\)/#\\1/i' /etc/httpd/conf/httpd.conf\r\n#Append a new line at the end with our preferred key and value\r\necho 'SecChrootDir /chroot/apache' | sudo tee -a /etc/httpd/conf/httpd.conf\r\n#Restart the service if it was already running, leave stopped if not.\r\nsudo service httpd condrestart\r\n\r\nThe chroot directory should obviously exist and should be owned by an isolated user and group. Ownership and ACL of this directory should be minimal, and in most cases the chroot directories should not be writable by the web server process user or group.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Apache chroot jail"
      }, 
      {
        "comment": "Apache has several directives that allow you to limit the size of a request which can be useful for mitigating the effects of a denial of service attack. \r\n\r\nHowever, since there is no universally accepted request size which can be considered safe for all environments, this rule is disabled by default. If you know what number to limit the request body size to in your environment, please put in the desired value in the field below and activate this rule.\r\n\r\nSome other directives to look at are LimitRequestFields, LimitRequestFieldSize and LimitRequestLine. These directives are set to a reasonable defaults for most servers, but you may want to tweak them to best fit your needs. See the documentation for more information.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LimitRequestBody", 
            "desired_value": "1048576", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": " ", 
            "suggestion": "Large inbound requests to a web server are a common means of affecting or amplifying a denial of service attack. Web servers should limit the size of inbound requests to a reasonable level for your specific server configuration.\r\n\r\nFor an Apache server the LimitRequestBody directive is used to limit requests to a certain number of bytes. By default, request sizes are unlimited.\r\n\r\nIMPORTANT NOTE: The suggested size of 1MB above may not be appropriate for all web servers, especially those that accept uploads. Please adjust this policy and your web server configuration(s) accordingly.\r\n\r\nIf 1MB is appropriate for your web servers, the following line can be added to /etc/httpd/conf/httpd.conf :\r\nLimitRequestBody 1048576\r\n", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Limit large requests"
      }, 
      {
        "comment": "Many default Apache installations will include cgi content that is not needed. This content includes scripts that will leak detailed server information. Remove the printenv script if it's been installed.\r\nThis check is *not* active by default.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "files": "/var/www/html/cgi-bin/printenv", 
            "exportable": true, 
            "object_type": "file_presence", 
            "suggestion": "Remove the printenv script if it's been installed. Use the command \"rm /var/www/html/cgi-bin/printenv\".", 
            "active": true, 
            "present": false
          }, 
          {
            "files": "/usr/local/apache2/cgi-bin/printenv", 
            "exportable": true, 
            "object_type": "file_presence", 
            "suggestion": "Remove the printenv script if it's been installed. Use the command \"rm /usr/local/apache2/cgi-bin/printenv\"", 
            "active": false, 
            "present": false
          }
        ], 
        "name": "Remove default CGI content printenv"
      }, 
      {
        "comment": "SSLv2 protocol is insecure and should not be used. Also newer TLS protocols should be preferred over old ones.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "SSLCipherSuite ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!MD5:!RC4", 
            "suggestion": "Make sure that in Apache configuration file, that SSLCipherSuite contains the following: \"ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!MD5:!RC4\". This allows all Ciphers except for the insecure ones with the \"!\" in front of them.", 
            "active": true, 
            "present": true
          }
        ], 
        "name": "Restrict Weak SSL Protocols and Ciphers"
      }, 
      {
        "comment": "LimitRequestFields sets the maximum limit on  HTTP request headers allowed. Recommendation is to set LimitRequestFields to 100 or less.\r\nThis check is *not* active by default.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LimitRequestFields", 
            "desired_value": "100", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Set LimitRequestFields to 100 or less in the Apache configuration file.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Ensure the LimitRequestFields directive is set to 100 or less"
      }, 
      {
        "comment": "LimitRequestBody sets the maximum size of an HTTP request body. Recommendation is to set LimitRequestBody to 102400 or less.\r\nThis check is *not* active by default.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LimitRequestBody", 
            "desired_value": "102400", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Set LimitRequestBody to 102400 or less in the Apache configuration file. Because this check is looking for the specific value of \"102400\" it may fail when the LimitRequestBody is set to something lower than \"102400\". If this is the case change the \"Desired Value\" in the check to actual value set in httpd.conf.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Set the LimitRequestBody directive to 102400 or less"
      }, 
      {
        "comment": "LimitRequestFieldSize sets the maximum size of an HTTP request header field. Recommendation is to set  LimitRequestFieldSize to 1024 or less.\r\nThis check is *not* active by default.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "LimitRequestFieldsize", 
            "desired_value": "1024", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Set LimitRequestFieldsize to 1024 or less in the Apache configuration file. Because this check is looking for the specific value of \"1024\" it may fail when the LimitRequestFieldsize is set to something lower than \"1024\". If this is the case change the \"Desired Value\" in the check to actual value set in httpd.conf.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Set the LimitRequestFieldsize director to 1024 or less"
      }, 
      {
        "comment": "Give the Apache User an Invalid Shell.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "system_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "files": "/etc/passwd", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "^apache:.*:/sbin/nologin$", 
            "suggestion": "Apache user must be set to nologin. Edit /etc/passwd so that the Apache user's shell is set to nollogin.", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/passwd", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "^httpd:.*:/sbin/nologin$", 
            "suggestion": "Apache user must be set to nologin. Edit /etc/passwd so that the Apache user's shell is set to nollogin. This check is inactive because \"httpd\" is not the default. If the Apache user is set to \"httpd\" then use this check instead.", 
            "active": false, 
            "present": true
          }
        ], 
        "name": "Give the Apache User an Invalid Shell"
      }, 
      {
        "comment": "The user account  \"apache\" should not have a valid password.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "system_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "files": "/etc/shadow", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "apache:!!:", 
            "suggestion": "Lock the \"apache\" account with the following command: # passwd -l apache", 
            "active": true, 
            "present": true
          }
        ], 
        "name": "Lock the Apache user account"
      }, 
      {
        "comment": "Because the Apache autoindex module creates web pages listing the contents of the directories on the server, it should be turned off.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "## LoadModule autoindex_module modules/mod_autoindex.so", 
            "suggestion": "Comment out the autoindex_module under Loadmodule in the Apache configuration file.", 
            "active": true, 
            "present": true
          }
        ], 
        "name": "Disable AutoIndex Module"
      }, 
      {
        "comment": "To prevent users from using your webserver to proxy traffic, all proxy modules should be turned off.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "# LoadModule proxy_module modules/mod_proxy.so", 
            "suggestion": "Comment out proxy modules in the Apache configuration file.", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "# LoadModule proxy_balancer_module modules/mod_proxy_balancer.so", 
            "suggestion": "Comment out proxy modules in the Apache configuration file.", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "# LoadModule proxy_ftp_module modules/mod_proxy_ftp.so", 
            "suggestion": "Comment out proxy modules in the Apache configuration file.", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "# LoadModule proxy_http_module modules/mod_proxy_http.so", 
            "suggestion": "Comment out proxy modules in the Apache configuration file.", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "# LoadModule proxy_connect_module modules/mod_proxy_connect.so", 
            "suggestion": "Comment out proxy modules in the Apache configuration file.", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "# LoadModule proxy_connect_module modules/mod_proxy_ajp.so", 
            "suggestion": "Comment out proxy modules in the Apache configuration file.", 
            "active": true, 
            "present": true
          }
        ], 
        "name": "Disable Proxy Modules"
      }, 
      {
        "comment": "Information Leakage via Default Apache Content", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "", 
            "desired_value": "#<Directory \"/var/www/icons\">", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "The icons directory setting in httpd.conf file should be commented out. The line should look like this \"#<Directory \"/var/www/icons\">\"", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Information Leakage via Default Apache Content"
      }, 
      {
        "comment": "This rule is designed to make sure logs are being rotated on a regular basis.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "files": "/etc/cron.daily/logrotate", 
            "exportable": true, 
            "object_type": "file_presence", 
            "suggestion": "Make sure /etc/cron.daily/logrotate and  /etc/logrotate.d/httpd are both present on the system.", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/logrotate.d/httpd", 
            "exportable": true, 
            "object_type": "file_presence", 
            "suggestion": "Make sure /etc/cron.daily/logrotate and  /etc/logrotate.d/httpd are both present on the system.", 
            "active": true, 
            "present": true
          }
        ], 
        "name": "Log Storage and Rotation"
      }, 
      {
        "comment": "To remove the threat of information leakage. Remove the Apache user manual content or comment out configurations referencing the manual.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "#<Location /server\\-status>", 
            "suggestion": "Comment out the Location /server-status in Apache configuration file. Should read \"#<Location /server-status>\"", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "#<Location /server\\-info>", 
            "suggestion": "Comment out the Location /server-info in Apache configuration file. Should read \"#<Location /server-info>\"", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "#<Location /perl\\-status>", 
            "suggestion": "Comment out the Location /perl-status in Apache configuration file. Should read \"#<Location /perl-status>\"", 
            "active": true, 
            "present": true
          }, 
          {
            "files": "/var/www/manual/index.html", 
            "exportable": true, 
            "object_type": "file_presence", 
            "suggestion": "The default location for the manual should not be there. Remove the files and directory in \"var/www/manual/\".", 
            "active": true, 
            "present": false
          }
        ], 
        "name": "Remove default HTML content"
      }, 
      {
        "comment": "SSLInsecureRenegotiation allows backward compatibility to older clients with unpatched SSL installations. Recommendation is to set SSLInsecureRenegotiation to \"off\".", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "SSLInsecureRenegotiation", 
            "desired_value": "off", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Set SSLInsecureRenegotiation to \"off\" in the Apache configuration file.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Restrict Insecure SSL Renegotiation"
      }, 
      {
        "comment": "Set the KeepAlive directive to On", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "KeepAlive", 
            "desired_value": "On", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Enabling the KeepAlive feature reduces latency for requests.  To turn this feature on, add the line:\r\nKeepAlive on\r\nto the main httpd.conf file, commonly found at /etc/httpd/conf/httpd.conf", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Set the KeepAlive directive to On"
      }, 
      {
        "comment": "Set the MaxKeepAliveRequests directive to 100 or greater. \r\nThis rule is \"inactive\" by default.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "MaxKeepAliveRequests", 
            "desired_value": "100", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Set MaxKeepAliveRequests to 100 or less in the Apache configuration file. Because this check is looking for the specific value of \"100\" it may fail when the MaxKeepAliveRequests is set to something lower than \"100\". If this is the case change the \"Desired Value\" in the check to actual value set in httpd.conf.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Set the MaxKeepAliveRequests directive to 100 or greater"
      }, 
      {
        "comment": "Timeout  controls the maximum seconds that Apache HTTP server will wait for an Input/Output call to finish. Recommendation is to set TimeOut to less than 10.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "comment_character": "", 
            "exportable": true, 
            "config_item": "Timeout", 
            "desired_value": "10", 
            "object_type": "configuration_file_setting", 
            "config_file_section": "", 
            "delimiter": "", 
            "suggestion": "Set Timeout less than 10 in the Apache configuration file. Because this check is looking for the specific value of \"10\" it may fail when the Timeout is set to something lower than \"10\". If this is the case change the \"Desired Value in the check to actual value set in httpd.conf.", 
            "active": true, 
            "config_file_path": "/etc/httpd/conf/httpd.conf"
          }
        ], 
        "name": "Set the Timeout directive to 10 or less"
      }, 
      {
        "comment": "Enable only necessary Authentication and Authorization Modules. This rule is inactive by default and must be customized to your environment.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": false, 
        "checks": [
          {
            "files": "/etc/httpd/conf/httpd.conf", 
            "exportable": true, 
            "object_type": "file_string_presence", 
            "patterns": "LoadModule", 
            "suggestion": "Enable only necessary Authentication and Authorization Modules. In httpd.conf enable only the Authentication that is needed, comment out all unnecessary \"LoadModule\"s.", 
            "active": false, 
            "present": false
          }
        ], 
        "name": "Enable only necessary Authentication and Authorization Modules"
      }, 
      {
        "comment": "Many default Apache installations will include cgi content that is not needed. This content includes scripts that will leak detailed server information. Remove the test-cgi script if it's been installed.", 
        "reference_identifiers": [], 
        "log": false, 
        "taxonomy": "software_configuration", 
        "rule_operator": "AND", 
        "alert": false, 
        "critical": false, 
        "active": true, 
        "checks": [
          {
            "files": "/usr/local/apache2/cgi-bin/test-cgi", 
            "exportable": true, 
            "object_type": "file_presence", 
            "suggestion": "Remove the test-cgi script if it's been installed. Use the following command \"rm /usr/local/apache2/cgi-bin/test-cgi\"", 
            "active": false, 
            "present": false
          }, 
          {
            "files": "/var/www/cgi-bin/test-cgi", 
            "exportable": true, 
            "object_type": "file_presence", 
            "suggestion": "Remove the test-cgi script if it's been installed. Use the following command \"rm /var/www/cgi-bin/test-cgi\"", 
            "active": true, 
            "present": false
          }
        ], 
        "name": "Remove default CGI content test-cgi"
      }
    ], 
    "id": "0e521d40a5b9013267373c764e10c220", 
    "description": "This is a configuration policy for an Apache HTTP server running on CentOS, RHEL, Fedora, and Amazon AMI Linux systems. It addresses configuration of the Apache HTTP server itself, not the entire Linux operating system.\r\n\r\nCloudPassage policies may require customization and addition of rules to meet all policy requirements. This and other policy templates can be cloned and customized to fit specific distributions or environments (e.g. varying file paths or process names)."
  }
}